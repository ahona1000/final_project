---
title: "Final Project"
author: "Ahona Roy" 
date: "December 1"
format: pdf
execute:
  eval: true
  echo: false
---

```{python}
#setup
import pandas as pd
import altair as alt
import time
import requests
import lxml
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from datetime import datetime

import warnings 
warnings.filterwarnings('ignore')
alt.renderers.enable("png")
```


```{python}
gender_3 =pd.read_csv('/Users/ahonaroy/Documents/GitHub/archive (2)/Employee_Salary_Dataset.csv')

print(gender_3.head())
```


```{python}
import pandas as pd

#importing first dataset
gender_1 = pd.read_csv('/Users/ahonaroy/Documents/GitHub/Glassdoor Gender Pay Gap.csv')

print(gender_1.head())

```


## Data cleaning
```{python}
#checking for na values
gender_1.isnull().sum()

```

```{python}
gender_3.isnull().sum()
```


```{python}
gender_1 = gender_1[(gender_1['Age'] >= 18) & (gender_1['BasePay'] > 0) & (gender_1['PerfEval'] >= 1)]

```


```{python}
gender_1.describe()
```


```{python}
gender_1.info()
```


```{python}
gender_1.drop_duplicates(inplace=True)

```

#Renaming columns
```{python}
gender_1.rename(columns={'JobTitle': 'Job_Title', 'BasePay': 'Base_Pay', 'PerfEval': 'Performance_Eval'}, inplace=True)

```

#Creating total compensation column
```{python}
gender_1['Total_Compensation'] = gender_1['Base_Pay'] + gender_1['Bonus']

```

#Sorting based on seniority level
```{python}
def experience_level(seniority):
    if seniority <= 2:
        return 'Junior'
    elif seniority <= 4:
        return 'Mid-Level'
    else:
        return 'Senior'

gender_1['Experience_Level'] = gender_1['Seniority'].apply(experience_level)

```

#Clean up dataset gender_3
```{python}
#Drop duplicates
gender_3 = gender_3.drop_duplicates()

```


```{python}
#Filtering age as above or equal to 18, salary above 0(positive values) and experience years not above 18 
gender_3 = gender_3[(gender_3['Age'] >= 18) & (gender_3['Age'] <= 65) & (gender_3['Salary'] > 0) & 
            (gender_3['Experience_Years'] <= (gender_3['Age'] - 18))]

```


```{python}
#Making sure to drop NA values
gender_3 = gender_3.dropna() 

```

## Data visualization

1.Bar Chart: Average Salary by Gender
```{python}
import altair as alt
import pandas as pd
import os

# Aggregate average salary by gender
salary_by_gender = gender_3.groupby('Gender', as_index=False)['Salary'].mean()

# Create bar chart
bar_chart = alt.Chart(salary_by_gender).mark_bar().encode(
    x=alt.X('Gender', title='Gender'),
    y=alt.Y('Salary', title='Average Salary', scale=alt.Scale(domain=[0, salary_by_gender['Salary'].max() + 5000])),
    color=alt.Color('Gender', scale=alt.Scale(domain=['Male', 'Female'], range=['blue', 'pink']))
).properties(
    title='Average Salary by Gender',
    width=400,
    height=300
)

# Display the chart
bar_chart
```


2.Scatter Plot: Experience vs. Salary
```{python}
import altair as alt
import altair_viewer

# Scatter plot of Experience_Years vs. Salary, color by Gender
scatter_plot = alt.Chart(gender_3).mark_circle(size=100).encode(
    x=alt.X('Experience_Years', title='Years of Experience'),
    y=alt.Y('Salary', title='Salary'),
    color=alt.Color('Gender', scale=alt.Scale(domain=['Male', 'Female'], range=['blue', 'pink'])),
    tooltip=['Gender', 'Experience_Years', 'Salary']
).properties(
    title='Experience vs. Salary by Gender'
)

scatter_plot
```


3.Geopandas Map Visualization

```{python}
gender_2 = pd.read_csv('/Users/ahonaroy/Documents/GitHub/archive (1)/PanelStudyIncomeDynamics.csv') 

print(gender_2.head())

```

```{python}
print(gender_2.columns)
```

```{python}
print(gender_2['region'].unique())

```

```{python}
region_mapping = {
    1: "Northeast",
    2: "Midwest",
    3: "South",
    4: "West"
}

# Map the region codes
gender_2['region_name'] = gender_2['region'].map(region_mapping)

```

```{python}
regional_data = gender_2.groupby('region_name').agg({'farminc': 'mean'}).reset_index()
regional_data.rename(columns={'farminc': 'avg_income'}, inplace=True)

```

```{python}
import geopandas as gpd

# Example: Load US states and map them to regions
us_states = gpd.read_file('https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json')

# Map state names to regions
state_to_region = {
    'Maine': 'Northeast',
    'New York': 'Northeast',
    # Add other mappings here...
}

us_states['region_name'] = us_states['name'].map(state_to_region)

```

```{python}
merged = us_states.merge(regional_data, on='region_name', how='left')

```

```{python}
import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 1, figsize=(10, 8))
merged.plot(column='avg_income', ax=ax, legend=True, cmap='coolwarm')
plt.title('Average Income by Region')
plt.show()

```


```{python}
gender_2 = pd.read_csv('/Users/ahonaroy/Documents/GitHub/archive (1)/PanelStudyIncomeDynamics.csv') 

print(gender_2.head())

```

```{python}
print(gender_2.columns)
```

```{python}
print(gender_2['region'].unique())

```

```{python}
region_mapping = {
    1: "Northeast",
    2: "Midwest",
    3: "South",
    4: "West"
}

# Map the region codes
gender_2['region_name'] = gender_2['region'].map(region_mapping)

```

```{python}
regional_data = gender_2.groupby('region_name').agg({'farminc': 'mean'}).reset_index()
regional_data.rename(columns={'farminc': 'avg_income'}, inplace=True)

```

```{python}
import geopandas as gpd

# Example: Load US states and map them to regions
us_states = gpd.read_file('https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json')

# Map state names to regions
state_to_region = {
    'Maine': 'Northeast',
    'New York': 'Northeast',
    # Add other mappings here...
}

us_states['region_name'] = us_states['name'].map(state_to_region)

```

```{python}
merged = us_states.merge(regional_data, on='region_name', how='left')

```

```{python}
import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 1, figsize=(10, 8))
merged.plot(column='avg_income', ax=ax, legend=True, cmap='coolwarm')
plt.title('Average Income by Region')
plt.show()

```


```{python}
print(merged.head())
print(merged[['region_name', 'avg_income']].dropna())

```



# Dataset 1 data visualization
```{python}
import pandas as pd

#importing first dataset
gender_1 = pd.read_csv('/Users/ahonaroy/Documents/GitHub/Glassdoor Gender Pay Gap.csv')

print(gender_1.head())

```

# Heatmap
```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming gender_1 is already loaded
# Select numerical columns for the heatmap
numerical_cols = ['Age', 'BasePay', 'Bonus', 'PerfEval', 'Seniority']
data = gender_1[numerical_cols]

# Calculate the correlation matrix
corr_matrix = data.corr()

# Create the heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap of Numerical Features")
plt.show()

```



```{python}
import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'gender_1' is already loaded as a DataFrame
# Create a grouped DataFrame by Gender and Performance Evaluation
perf_eval_gender = gender_1.groupby(['PerfEval', 'Gender']).size().unstack(fill_value=0)

# Plot the stacked bar chart
perf_eval_gender.plot(kind='bar', stacked=True, color=['pink', 'blue'])

# Customize the plot
plt.title("Performance Evaluation Scores by Gender")
plt.xlabel("Performance Evaluation")
plt.ylabel("Count")
plt.xticks(rotation=0)
plt.legend(title="Gender")
plt.tight_layout()

# Show the plot
plt.show()

```


## Extra Credit 


```{python}
import nltk
from nltk.tokenize import word_tokenize

# Download punkt tokenizer models
nltk.download('punkt')

# Example job description
job_desc = "We are looking for a dynamic leader to manage our sales team."

# Tokenization
tokens = word_tokenize(job_desc.lower())  # Lowercased

print(tokens)

```

#1. 
```{python}
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Example job description
job_desc = "We are looking for a dynamic leader to manage our sales team."

# Download necessary NLTK resources
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

# Tokenization
tokens = word_tokenize(job_desc.lower())  # Lowercased

# Remove stopwords
stop_words = set(stopwords.words("english"))
tokens = [word for word in tokens if word not in stop_words]

# Lemmatization
lemmatizer = WordNetLemmatizer()
lemmatized_tokens = [lemmatizer.lemmatize(word) for word in tokens]

# Gendered words example (custom lists)
gendered_words = {
    "male": ["man", "he", "his", "him", "male", "boy"],
    "female": ["woman", "she", "her", "female", "girl"]
}

# Detect gender bias function
def detect_gender_bias(tokens):
    male_words = [word for word in tokens if word in gendered_words["male"]]
    female_words = [word for word in tokens if word in gendered_words["female"]]
    return male_words, female_words

# Apply function to lemmatized tokens
male_words, female_words = detect_gender_bias(lemmatized_tokens)

# Output results
print("Male words:", male_words)
print("Female words:", female_words)

```


#2. 
```{python}
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Download required NLTK resources if not already done
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

# Load the gender_4 dataset
gender_4 = pd.read_csv("/Users/ahonaroy/Documents/GitHub/final_project/data/job_title_des 2.csv")

# Ensure we are working only with the 'Job Description' column
job_descriptions = gender_4['Job Description']  # Note the space in the column name

# Define expanded gendered words for detecting bias
gendered_words = {
    "male": ["he", "him", "his", "man", "men", "masculine", "male", "strong", "competitive", "dominant", "leader", "chief", "executive", "boss"],
    "female": ["she", "her", "hers", "woman", "women", "feminine", "female", "nurturing", "supportive", "collaborative", "assistant", "helper", "coordinator"]
}

# Tokenization and preprocessing
def process_job_description(description):
    # Tokenize the description
    tokens = word_tokenize(description.lower())  # Lowercased
    print(tokens)  # Print tokens to check tokenization
    
    # Remove stopwords
    stop_words = set(stopwords.words("english"))
    filtered_tokens = [word for word in tokens if word not in stop_words]
    
    # Lemmatize tokens
    lemmatizer = WordNetLemmatizer()
    lemmatized_tokens = [lemmatizer.lemmatize(word) for word in filtered_tokens]
    
    return lemmatized_tokens

# Detect gender bias in the job description
def detect_gender_bias(tokens):
    male_words = [word for word in tokens if word in gendered_words["male"]]
    female_words = [word for word in tokens if word in gendered_words["female"]]
    return male_words, female_words

# Apply the processing to each job description in the dataset
gender_bias_results = []
for description in job_descriptions:
    tokens = process_job_description(description)
    male_words, female_words = detect_gender_bias(tokens)
    gender_bias_results.append({
        "description": description,
        "male_words": male_words,
        "female_words": female_words
    })

# Convert results to a DataFrame for easier viewing
gender_bias_df = pd.DataFrame(gender_bias_results)

# Display the results
print(gender_bias_df)

```


```{python}
print(gender_bias_df.head())

```

#graphing it
```{python}
import matplotlib.pyplot as plt

# Calculate the total count of male and female words across all descriptions
male_counts = gender_bias_df['male_words'].apply(len)
female_counts = gender_bias_df['female_words'].apply(len)

# Plotting
plt.figure(figsize=(10, 6))
plt.hist([male_counts, female_counts], bins=20, label=['Male Words', 'Female Words'], color=['blue', 'pink'])
plt.title('Distribution of Gendered Words in Job Descriptions')
plt.xlabel('Word Count')
plt.ylabel('Frequency')
plt.legend()
plt.show()

```

From our graph, we can see that there are more female words than men. 

## main graph
```{python}
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

df = pd.read_csv('/Users/ahonaroy/Documents/GitHub/final_project/data/job_title_des 2.csv')

# Remove 'Unnamed: 0' column if it is just an index
df = df.drop(columns=['Unnamed: 0'])

# Define gendered words
gendered_words = {
    'male': ['he', 'man', 'male', 'his', 'brother', 'father'],
    'female': ['she', 'woman', 'female', 'her', 'sister', 'mother']
}

# Tokenize and filter gendered words in job descriptions
def detect_gender_bias(job_desc):
    tokens = word_tokenize(job_desc.lower())  # Tokenize and convert to lowercase
    male_words = [word for word in tokens if word in gendered_words["male"]]
    female_words = [word for word in tokens if word in gendered_words["female"]]
    return len(male_words), len(female_words)

# Apply the function to the 'Job Description' column
df['male_words'], df['female_words'] = zip(*df['Job Description'].apply(detect_gender_bias))

# Now, group by 'Job Title' and calculate the sum of male and female words for each title
job_title_grouped = df.groupby('Job Title').agg({'male_words': 'sum', 'female_words': 'sum'}).reset_index()

# Print the result to see which job titles have more male or female words
print(job_title_grouped)

# Plot the results to visualize the differences
import matplotlib.pyplot as plt
job_title_grouped.set_index('Job Title')[['male_words', 'female_words']].plot(kind='bar', figsize=(14, 7))
plt.title('Male vs Female Words by Job Title')
plt.ylabel('Count of Gendered Words')
plt.xticks(rotation=90)  
plt.show()

```

From the output, it looks like some job titles have more male-associated words (e.g., Backend Developer and Network Administrator), while others have more female-associated words (e.g., Database Administrator). This gives us a sense of the gendered language in job descriptions and how it might reflect gender biases.

## Writeup

## Introduction

The presence of gendered language in job descriptions has been a subject of concern due to its potential impact on workforce diversity. This project investigates the prevalence of gendered language in job descriptions and its implications for diversity in hiring. The goal is to assess how gendered language may influence job applications and whether such language can discourage diverse applicants from applying.

## Methodology

### Data Collection

The dataset used in this analysis contains job descriptions from various roles across multiple industries. The primary columns of interest are "Job Title" and "Job Description", which provide insight into the language used in the descriptions.

### NLP- Extra credit portion

I utilized Natural Language Processing (NLP) methods, such as tokenization, stopword removal, and lemmatization, to analyze the language in the job descriptions. Gendered words were identified using predefined lists of male- and female-associated terms.

### Data Analysis

The data was processed to identify patterns in the usage of gendered language across different job titles. I also visualized the distribution of gendered language across various roles.

## Results and Discussion

### Findings

My analysis revealed that certain job titles, particularly those in technology fields (e.g., "Backend Developer", "DevOps Engineer"), showed a higher frequency of male-associated words. This suggests a potential bias in the language that may influence the diversity of applicants.

### Interpretation

The prevalence of gendered language may discourage women from applying for certain roles, especially in male-dominated industries. This highlights the need for companies to consider adopting more gender-neutral language to create a more inclusive environment.

## Conclusion

This project demonstrates that gendered language is prevalent in job descriptions, particularly in male-dominated fields. To promote diversity and inclusion, organizations should consider using gender-neutral language in their job postings. Future work could expand this analysis to more job titles or apply machine learning techniques for automated analysis.

## Notes

The dynamic plot I created in shiny is not representative of the salaries women and men get and does not display the gender parity. Women seem to have a higher salary because of the small number of female employees with higher salaries compared to the male employees. This does not necessarily indicate a systemic trend but is simply a result of the small sample size and salary distribution in the dataset.